<?xml version='1.0' encoding='UTF-8'?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/" version="2.0"><channel><title>吴元哲的博客</title><link>https://Lietc.github.io/devops_wyz.github.io</link><description>记录我的一些笔记</description><copyright>吴元哲的博客</copyright><docs>http://www.rssboard.org/rss-specification</docs><generator>python-feedgen</generator><image><url>https://avatars.githubusercontent.com/u/113400580?v=4</url><title>avatar</title><link>https://Lietc.github.io/devops_wyz.github.io</link></image><lastBuildDate>Sun, 18 Aug 2024 09:25:26 +0000</lastBuildDate><managingEditor>吴元哲的博客</managingEditor><ttl>60</ttl><webMaster>吴元哲的博客</webMaster><item><title>进程管理</title><link>https://Lietc.github.io/devops_wyz.github.io/post/jin-cheng-guan-li.html</link><description># 进程管理&#13;
&#13;
程序: 是下载或者编写的静态的代码,只会占用磁盘空间,并不会占用内存&#13;
&#13;
进程: 是运行中的动态的代码 占用 内存 CPU等等&#13;
&#13;
在Linux中所有的程序,设备等都拥有自己的编号如 UUID UID GID等等,进程使用的是**PID 编号**&#13;
&#13;
进程之间也分为 **父进程/子进程** 在父进程程序启动或关闭时,都会连带启动或关闭子进程&#13;
&#13;
**systemd** 是所有进程的父进程,或者可以说是所有进程的**根** 上帝进程&#13;
&#13;
**孤儿进程** 是父进程关闭时,因为一些错误无法关闭的子进程,会导致该子进程疯狂的占用资源&#13;
&#13;
**僵尸进程 **在进程中也拥有一些无用的,或是损坏的进程,这时程序无法意识到自己已经故障或卡死就需要我们人工来进程杀除&#13;
&#13;
---&#13;
&#13;
```html&#13;
pstree [-选项] [PID或用户名]&#13;
```&#13;
&#13;
选项列举&#13;
&#13;
- -a  显示出完整的命令行&#13;
- -p  显示出所有的PID进程号&#13;
&#13;
---&#13;
&#13;
```&#13;
ps [选项] ....&#13;
```&#13;
&#13;
选项列举&#13;
&#13;
- aux    显示当前终端的所有进程(a) 当前用户在所有终端下的进程(x) 以用户格式输出(u)是三个选项连用&#13;
&#13;
- -elf      显示系统内所有的进程(-e)  以长格式输出(-i)信息  包括最完整的进程信息(-f)&#13;
      #会有PPID的一列是父进程的PID&#13;
&#13;
- ```&#13;
  ps -aux --sort=-%cpu | head -n 10   #按CPU使用率降序排序，并显示前10个进程的信息&#13;
  ```&#13;
&#13;
- ```&#13;
  ps -aux --sort=-%mem | head -n 10   #按内存使用率降序排序，并显示前10个进程的信息&#13;
  ```&#13;
&#13;
---&#13;
&#13;
```&#13;
top [-d 刷新秒数] [-U 用户名]&#13;
在top排列中使用&#13;
P  进行CPU使用率的排序&#13;
M  进行Meu使用率的排序&#13;
G  进行Gpu使用率的排序&#13;
```&#13;
&#13;
top是一个交互式的工具,常用来**查看系统的资源使用率和进程**&#13;
&#13;
---&#13;
&#13;
``` &#13;
pgrep [选项] 查询条件&#13;
```&#13;
&#13;
选项列举&#13;
&#13;
- -l  输出进程名,默认pgrep只会输出PID&#13;
- -U 指定查看用户的进程&#13;
- -x  精确匹配完整的进程名&#13;
&#13;
---&#13;
&#13;
### 进程的前后台调用&#13;
&#13;
前台启动: 正常的输入命令  命令运行期间占用当前的shell终端&#13;
&#13;
后台启动: 在命令行末尾添加'&amp;'符号,不占用当前终端,在后台默默运行&#13;
&#13;
```&#13;
例如 cp /dev/sr0 /mkdir &amp;&#13;
```&#13;
&#13;
Ctrl + z 组合键 : 挂起当前的进程(暂停并且转入后台)&#13;
&#13;
```&#13;
jobs  [-l] #查看后台任务列表&#13;
-l 		   #查看后台任务的进程号PID&#13;
#编号   状态    命令&#13;
```&#13;
&#13;
```&#13;
fg 后台进程编号    #将后台的任务转到前台执行&#13;
```&#13;
&#13;
```&#13;
bg 后台进程编号	 #激活被挂起的进程&#13;
```&#13;
&#13;
---&#13;
&#13;
### 杀死进程&#13;
&#13;
杀死进程的不同方法&#13;
&#13;
 	- Ctrl + c  组合键   中断当前的命令程序&#13;
&#13;
```&#13;
kill [-9] PID  或  kill [-9] %后台任务编号&#13;
```&#13;
&#13;
```&#13;
killall [-9] 进程名   #杀死该进程名&#13;
```&#13;
&#13;
```&#13;
pkill  查找条件   #不建议使用&#13;
```&#13;
&#13;
强制踢出一个用户(杀死该用户开启的所有进程)      **`killall -9 -u 用户名`**&#13;
&#13;
------。</description><guid isPermaLink="true">https://Lietc.github.io/devops_wyz.github.io/post/jin-cheng-guan-li.html</guid><pubDate>Sun, 18 Aug 2024 09:24:45 +0000</pubDate></item><item><title>测试</title><link>https://Lietc.github.io/devops_wyz.github.io/post/ce-shi.html</link><description># 测试页。</description><guid isPermaLink="true">https://Lietc.github.io/devops_wyz.github.io/post/ce-shi.html</guid><pubDate>Sat, 17 Aug 2024 14:33:01 +0000</pubDate></item></channel></rss>